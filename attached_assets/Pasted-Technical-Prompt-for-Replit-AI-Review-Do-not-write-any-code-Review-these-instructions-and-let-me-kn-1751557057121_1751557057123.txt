Technical Prompt for Replit AI Review
Do not write any code. Review these instructions and let me know if it fits our overall strategy and if it violates any of the unbreakable rules (without writing code). A quick summary of our unbreakable rules:

Architecture Compliance: Every change must align with server-authoritative, database-driven design.

Authentic Data Only: No mock, placeholder, or hardcoded data allowed.

. Also, please let me know if you think this will solve the following problems:

Problem 1: Passive abilities that should activate at the start of a turn are not implemented.

Problem 2: The handleStartOfTurn function in the battle engine is an empty stub and does not fulfill its role in the 3-phase turn lifecycle.

Architectural Mandate Reminder
Before proceeding, review this core project directive: The server is the only brain; the client is only hands and eyes.

All game logic, rule validation, and calculations must occur on the server, primarily within server/battleEngine.ts. All dynamic values (costs, multipliers, chances, etc.) must be read from the database. The client must remain "dumb" and only render the state and log provided by the server. There are no exceptions.

1. Goal:
Implement the logic for START_OF_TURN passive abilities within the handleStartOfTurn function, making it fully database-driven.

2. File Modifications:

server/battleEngine.ts

3. Implementation Details:

Navigate to the handleStartOfTurn function and remove the // TODO comments for passive abilities.

The implementation should mirror the logic from the handleEndOfTurn function:

Identify the team whose turn is beginning.

Iterate through every monster on that team (active and benched).

For each monster, check its abilities from the battleState.abilities_map.

Find any ability that meets all of these database-driven criteria:

ability_type is 'PASSIVE'

activation_trigger is 'START_OF_TURN'

The monster's current status (active or benched) matches the ability's activation_scope.

Execute the ability's effect and push a descriptive message to the battleState.battleLog. (For now, we only have healing passives, but this logic should be generic).

4. Architecture Compliance Check:

Does this implementation use database properties (activation_trigger, activation_scope, etc.) to drive all logic?

Does this change complete a core component of the 3-phase turn lifecycle as defined in the Onboarding Brief ?