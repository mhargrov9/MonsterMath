Do not write any code. Review these instructions and let me know if it fits our overall strategy and if it violates any of the unbreakable rules (without writing code). Also, please let me know if you think this will solve the following problems:

Problem: The battle engine incorrectly applies percentage-based healing effects (like Soothing Aura) as small, flat-value heals.

Goal
Fix the HEALING_OVER_TIME logic in the handleEndOfTurn function. The corrected code must properly check the value_type from the database and apply healing as either a percentage of Max HP or a flat value, as intended.

File Modifications
server/battleEngine.ts

Action: Locate the handleEndOfTurn function. Inside this function, find the loop that processes the monster.statusEffects array, and specifically find the case 'HEALING_OVER_TIME': block within the switch statement.

You will completely replace the contents of that case block.

Code to Find and Replace:

Find this entire block:

TypeScript

case 'HEALING_OVER_TIME':
  // Calculate healing based on database values
  let healAmount;
  const healValue = effect.override_value || effect.effectDetails.default_value || 0;

  if (effect.effectDetails.value_type === 'PERCENT_MAX_HP') {
    const maxHp = monster.battleMaxHp || 0;
    healAmount = Math.floor(maxHp * (healValue / 100));
  } else {
    // Default to FLAT healing
    healAmount = healValue;
  }

  // Apply healing
  const currentHpHeal = monster.battleHp || 0;
  const maxHpHeal = monster.battleMaxHp || 0;
  const newHpHeal = Math.min(currentHpHeal + healAmount, maxHpHeal);
  monster.battleHp = newHpHeal;

  // Add battle log message
  battleState.battleLog.push(`${currentTeamName} ${monsterName} heals ${healAmount} HP from ${effect.effectDetails.name}!`);
  break;
New Replacement Code:

Replace the block above with this new, corrected version that properly checks the value_type and uses an immutable update pattern.

TypeScript

case 'HEALING_OVER_TIME': {
  const healValue = parseFloat(effect.override_value || effect.effectDetails.default_value || '0');
  if (healValue === 0) break;

  const maxHp = monster.battleMaxHp || 0;
  const currentHp = monster.battleHp || 0;
  let healAmount = 0;

  // CORRECTED LOGIC: Properly check the value_type from the effect's details
  if (effect.effectDetails.value_type === 'PERCENT_MAX_HP') {
    healAmount = Math.floor(maxHp * (healValue / 100));
  } else {
    // Fallback to FLAT healing
    healAmount = healValue;
  }

  if (healAmount > 0 && currentHp < maxHp) {
    monster.battleHp = Math.min(maxHp, currentHp + healAmount);
    battleState.battleLog.push(`${currentTeamName} ${monsterName} heals for ${healAmount} HP from ${effect.name}!`);
  }
  break;
}