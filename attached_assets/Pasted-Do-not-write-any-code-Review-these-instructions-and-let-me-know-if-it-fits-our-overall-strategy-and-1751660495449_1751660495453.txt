Do not write any code. Review these instructions and let me know if it fits our overall strategy and if it violates any of the unbreakable rules (without writing code). Also, please let me know if you think this will solve the following problems:

Problem: The executeAbility function was not updated in our last refactor and is still trying to apply status effects using old, now-deleted database columns (status_effect_applies). This causes all status effects applied by active abilities to fail.

Goal: Update executeAbility to Use the New Data Structure
Your task is to refactor the status effect application logic within the executeAbility function in server/battleEngine.ts. The code must be updated to read from the new, nested effectDetails object and use the override_ columns to construct the status effect object correctly.

File Modifications
1. server/battleEngine.ts
Action: Locate the executeAbility function.

Specific Change: Find the if block that checks if an ability applies a status effect. It currently starts with if (ability.status_effect_applies). You are to replace the entire contents of that if block with the following corrected logic:

TypeScript

// Check if ability applies a status effect using the new normalized structure
if (ability.status_effect_id && ability.effectDetails) {
  // Use override values from the ability, or fall back to the defaults from the status_effect
  const chance = ability.override_chance ?? ability.effectDetails.default_value ?? 1.0;

  // Compare the random float (0.0-1.0) directly against the probability
  if (Math.random() < chance) {
    // Create a complete status effect object to be applied to the monster
    const newStatusEffect = {
      name: ability.effectDetails.name,
      duration: ability.override_duration ?? ability.effectDetails.default_duration ?? 1,
      // Pass the full details object for the engine to use in other functions
      effectDetails: ability.effectDetails,
      // Pass ability-specific override values
      override_value: ability.override_value,
      override_chance: ability.override_chance,
    };

    // Add to target's statusEffects array
    if (!defender.statusEffects) {
      defender.statusEffects = [];
    }
    defender.statusEffects.push(newStatusEffect);

    // Add status effect message to battle log
    const defenderName = defender.monster?.name || defender.name;
    const effectName = ability.effectDetails.name.toLowerCase();
    battleState.battleLog.push(
      `${isPlayerTurn ? "Opponent's" : "Your"} ${defenderName} was ${effectName}!`,
    );
  }
}