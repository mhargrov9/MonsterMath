Do not write any code. Review these instructions and let me know if it fits our overall strategy and if it violates any of the unbreakable rules (without writing code). Also, please let me know if you think this will solve the following problems:

Problem 1: Incorrect Test Assertions: The integration tests for Damage-over-Time (DoT) are failing because their assertions are incorrect. One test expects the wrong amount of damage, and another expects damage to occur at the wrong time (during the opponent's turn).

Problem 2: Misaligned Test Logic: The tests do not correctly reflect the established game mechanic that DoT effects only trigger at the start of the affected team's turn.

Goal:
To fix the failing DoT integration tests in server/battleEngine.test.ts by aligning their logic and assertions with the engine's established rules.

File to Modify:
server/battleEngine.test.ts

Implementation Plan:
Fix the "Incorrect Damage Amount" Test:

Locate the test named "should apply DoT damage to benched monsters".

Review the mock data for the monster being tested. It likely has a battleMaxHp of 400 and a BURNED status effect with a default_value of '0.05' (which is 5%).

The correct damage calculation is 400 * 0.05 = 20.

The test expects the final HP to be 380 (400 - 20), not the incorrect values currently in the assertion.

Action: Correct the expect statement to assert that the final battleHp is 380.

Fix the "No Damage on Opponent's Turn" Test:

Locate the test named "should continue to apply DoT damage to a benched monster".

This test incorrectly expects a player's benched monster to take DoT damage during the AI's turn. This violates our game's rules.

Action: We will refactor this test to correctly validate our engine's logic. Change the assertion to confirm that the benched monster's health does not change. The new assertion should be:

JavaScript

expect(benchedMonster.battleHp).toBe(initialBenchHp);
This will turn the failing test into a passing test that confirms our "DoT on own turn" mechanic is working correctly.