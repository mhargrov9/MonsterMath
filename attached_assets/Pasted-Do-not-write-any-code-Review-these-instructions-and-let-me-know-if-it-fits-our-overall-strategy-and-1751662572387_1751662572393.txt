Do not write any code. Review these instructions and let me know if it fits our overall strategy and if it violates any of the unbreakable rules (without writing code). Also, please let me know if you think this will solve the following problems:

Problem 1: The player's HP and MP reset after their turn, indicating a server-side state corruption bug.

Problem 2: Status effects from the player's abilities fail to apply, while the AI's work correctly.

Root Cause: The client is sending a stale, incomplete ability object to the server, and the server is incorrectly trusting this "dumb" client data instead of using its own authoritative data.

Goal: Enforce Server Authority for Battle Actions
Your task is to refactor the "perform action" data flow. The client will now only send an abilityId to the server. The server will then be solely responsible for looking up the complete, authoritative ability data from the current battleState before processing the action. This will resolve the state corruption and make the system compliant with our architecture.

File Modifications
1. client/src/components/BattleArena.tsx
Action: Locate the handlePlayerAbility function.

Specific Change: Modify the body of the fetch request to the /api/battle/perform-action endpoint. It must now send the ability.id under the key abilityId, instead of sending the entire ability object.

Old: body: JSON.stringify({ battleId, ability })

New: body: JSON.stringify({ battleId, abilityId: ability.id })

2. server/routes.ts
Action: Locate the POST /api/battle/perform-action route definition.

Specific Change: Update this route to accept abilityId from the request body and pass it to the applyDamage function.

Change this line: const { battleId, ability, targetId } = req.body;

To this: const { battleId, abilityId, targetId } = req.body;

And change this line: const actionResult = await applyDamage(battleId, ability, targetId);

To this: const actionResult = await applyDamage(battleId, abilityId, targetId);

3. server/battleEngine.ts
Action: Locate the applyDamage function. This is the most important change.

Specific Changes:

Modify the function signature to accept abilityId: number instead of ability: Ability.

Add New Logic: At the very beginning of the function, after retrieving battleState, you must add logic to look up the authoritative ability object from the battleState.

Get the activeMonster from the playerTeam.

Get the monsterId for that monster.

Find the correct ability from battleState.abilities_map[monsterId] where the ability's id matches the abilityId passed into the function.

If no ability is found, throw an error.

The rest of the function (e.g., the call to handleActionPhase) will then use this authoritative ability object you just retrieved.

