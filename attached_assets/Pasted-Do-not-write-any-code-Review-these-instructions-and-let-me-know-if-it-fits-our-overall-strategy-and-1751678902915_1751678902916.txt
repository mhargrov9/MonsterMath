Do not write any code. Review these instructions and let me know if it fits our overall strategy and if it violates any of the unbreakable rules (without writing code). Also, please let me know if you think this will solve the following problems:

Problem: The handleStartOfTurn function is incomplete. It does not process any status effects, rendering effects like PARALYZED meaningless.

Goal: Refactor the handleStartOfTurn function to correctly implement the TURN_SKIP mechanic. The new function will check the active monster for this effect type and, if present, skip the monster's turn.

File Modifications
1. server/battleEngine.ts

Action: Locate and completely replace the existing handleStartOfTurn function with the following new, corrected code. This version is built to use our database-driven system correctly.

Replacement Code:

TypeScript

const handleStartOfTurn = (battleState: any, isPlayerTurn: boolean): { turnSkipped: boolean } => {
  const currentTeam = isPlayerTurn ? battleState.playerTeam : battleState.aiTeam;
  const activeIndex = isPlayerTurn ? battleState.activePlayerIndex : battleState.activeAiIndex;
  const activeMonster = currentTeam[activeIndex];
  const teamName = isPlayerTurn ? "Your" : "Opponent's";

  // --- Process Start-of-Turn Status Effects ---
  if (activeMonster.statusEffects && activeMonster.statusEffects.length > 0) {
    for (const effect of activeMonster.statusEffects) {
      if (effect.effectDetails?.effect_type === 'TURN_SKIP') {
        // If a monster has a TURN_SKIP effect, it loses its turn.
        battleState.battleLog.push(
          `${teamName} ${activeMonster.monster?.name || activeMonster.name} is paralyzed and can't move!`,
        );
        // Skip the rest of the start-of-turn phase and the entire action phase.
        return { turnSkipped: true }; 
      }
    }
  }

  // --- Process Start-of-Turn Passive Abilities (Future) ---
  // This section is reserved for future passives that trigger at the start of a turn.

  battleState.battleLog.push(`${teamName} ${activeMonster.monster?.name || activeMonster.name}'s turn begins!`);

  return { turnSkipped: false };
};