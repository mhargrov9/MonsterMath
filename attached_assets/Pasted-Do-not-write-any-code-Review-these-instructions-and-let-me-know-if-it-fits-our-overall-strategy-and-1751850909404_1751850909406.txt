Do not write any code. Review these instructions and let me know if it fits our overall strategy and if it violates any of the unbreakable rules (without writing code). Also, please let me know if you think this will solve the following problems:

Problem 1: Incomplete Damage Application: Damage-over-Time (DoT) effects like BURNED are only affecting the active monster, not the entire team. This violates the game's strategic design.

Problem 2: Failing Integration Test: The test designed to verify DoT on benched monsters is failing, confirming this bug.

Goal:
To fix the handleStartOfTurn function in server/battleEngine.ts. The updated logic must ensure that when a turn begins, DoT effects are processed for every monster on the current team (both active and benched), not just the active one.

File to Modify:
server/battleEngine.ts

Implementation Plan:
Locate handleStartOfTurn: Open server/battleEngine.ts and navigate to the handleStartOfTurn function.

Examine the DoT Loop: Find the loop that begins: for (const monster of currentTeam). While this loop correctly iterates through the team, the logic within it or how the state is updated is flawed.

Refactor the Team-Wide DoT Logic:

The existing loop is a good start. We need to ensure that inside this loop, the damageAmount is calculated correctly for each monster and, most importantly, that the monster.battleHp is updated for the correct monster object within the battle state.

The logic is as follows: For each monster on the team whose turn is starting, check its statusEffects. If any are of type DAMAGE_OVER_TIME, calculate the damage and subtract it from that monster's battleHp.

Preserve Turn-Skipping Logic: It is critical that the turn-skipping logic (for PARALYZED and CONFUSED) continues to apply only to the active monster. The DoT processing must not interfere with this.

Run Tests: After implementing the fix, execute the test suite. We expect the "DoT on bench" test to pass, which will bring our score to 55/57.